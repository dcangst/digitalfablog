# Generated by Django 2.0.1 on 2018-03-02 13:58

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('materials', '0001_initial'),
        ('services', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('members', '0001_initial'),
        ('cashier', '0001_initial'),
        ('machines', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Fablog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Creation date and time', verbose_name='created at')),
                ('closed_at', models.DateTimeField(blank=True, help_text='Closure date and time', null=True, verbose_name='closed at')),
                ('notes', models.TextField(blank=True, help_text='Notes on the Fablog', null=True, verbose_name='notes')),
            ],
            options={
                'verbose_name': 'fablog',
                'verbose_name_plural': 'fablogs',
                'ordering': ['-closed_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FablogBookings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cashier.Booking')),
                ('fablog', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fablog.Fablog')),
            ],
            options={
                'verbose_name': 'associated Booking',
                'verbose_name_plural': 'associated Bookings',
            },
        ),
        migrations.CreateModel(
            name='MachinesUsed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(help_text='Machine use start time', verbose_name='start time')),
                ('end_time', models.DateTimeField(blank=True, help_text='Machine use end time', null=True, verbose_name='end time')),
                ('fablog', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fablog.Fablog')),
                ('machine', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='machines.Machine')),
            ],
            options={
                'verbose_name': 'machine used',
                'verbose_name_plural': 'machines used',
            },
        ),
        migrations.CreateModel(
            name='MaterialsUsed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('units', models.PositiveSmallIntegerField(default=1, help_text='Units of Material used', verbose_name='units')),
                ('price_per_unit', models.DecimalField(decimal_places=2, help_text='price per unit', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='price/unit')),
                ('fablog', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fablog.Fablog')),
                ('material', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='materials.Material')),
            ],
            options={
                'verbose_name': 'material used',
                'verbose_name_plural': 'materials used',
            },
        ),
        migrations.CreateModel(
            name='ServicesUsed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('units', models.PositiveSmallIntegerField(default=1, help_text='Units of Service used', verbose_name='units')),
                ('fablog', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fablog.Fablog')),
                ('service', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='services.Service')),
            ],
            options={
                'verbose_name': 'service used',
                'verbose_name_plural': 'services used',
            },
        ),
        migrations.AddField(
            model_name='fablog',
            name='bookings',
            field=models.ManyToManyField(through='fablog.FablogBookings', to='cashier.Booking', verbose_name='Bookings'),
        ),
        migrations.AddField(
            model_name='fablog',
            name='closed_by',
            field=models.ForeignKey(blank=True, help_text='Labmanager who closed the Fablog', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='fablog_closed_by', to=settings.AUTH_USER_MODEL, verbose_name='Closed by'),
        ),
        migrations.AddField(
            model_name='fablog',
            name='created_by',
            field=models.ForeignKey(help_text='Labmanager who created the Fablog', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='fablog',
            name='machines',
            field=models.ManyToManyField(through='fablog.MachinesUsed', to='machines.Machine', verbose_name='machines used'),
        ),
        migrations.AddField(
            model_name='fablog',
            name='materials',
            field=models.ManyToManyField(through='fablog.MaterialsUsed', to='materials.Material', verbose_name='materials used'),
        ),
        migrations.AddField(
            model_name='fablog',
            name='member',
            field=models.ForeignKey(help_text='Member', null=True, on_delete=django.db.models.deletion.SET_NULL, to='members.Member', verbose_name='member'),
        ),
        migrations.AddField(
            model_name='fablog',
            name='services',
            field=models.ManyToManyField(through='fablog.ServicesUsed', to='services.Service', verbose_name='services used'),
        ),
    ]
